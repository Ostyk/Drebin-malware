import os
import numpy as np
import os
import pandas as pd

set_of_features = {
    "feature": 1,
    "permission": 2,
    "activity": 3,
    "service_receiver": 3,
    "provider": 3,
    "service": 3,
    "intent": 4,
    "api_call": 5,
    "real_permission": 6,
    "call": 7,
    "url": 8
}

def feature_counter(text,set_of_features):
    '''
    text-array of files
    feture couinter of 8 subsets
    '''
    features_map = {x: 0 for x in range(1, 9)}
    for l in text:
        if l != "\n":
            set_ = l.split("::")[0]
            features_map[set_of_features[set_]] += 1

    return np.array(list(features_map.values()))

def data_extractor(class_, type_, mypath,load_data):
    '''extracts data for either class, give data and path to files'''
    if not load_data:
        data = np.zeros((class_.shape[0], 8))
        for index, text_file in enumerate(class_):
            file_ = open("%s/%s" % (mypath, text_file)).readlines()
            data[index] = feature_counter(file_)
        np.save("data/"+type_+".npy", data)
        del data

    #print("Loading {} data ...".format(type_))
    data = np.load("data/"+type_+".npy")

    return data

def data_balance(negative='BALANCED',ML_type = 'Classification', N_family_count = 'ALL',printing=True):

    df = pd.read_csv('drebin/sha256_family.csv')
    files = os.listdir("drebin/feature_vectors")
    #counts = df['family'].value_counts()

    if ML_type == 'Classification':
        if N_family_count != 'ALL':
            df = df.groupby("family").filter(lambda x: len(x) > N_family_count) #filter families by count
        x=np.unique(df['family'])
        classes = dict(zip(list(np.unique(df['family'])),range(1,len(x)+1)))    
        to_=[]
        for i in df['family']:
            to_.append(classes[i])
        negative=to_
        

    positive = df['sha256'][df['sha256'].isin(files)]

    if ML_type == 'Detection':
        f = pd.DataFrame(files)
        #print(negative == 'BALANCED')
        if negative == 'BALANCED':
            N_neg = len(positive)
            negative = f[0][~f[0].isin(positive)].sample(N_neg)
        else:
            #N_neg = negative
            negative = f[0][~f[0].isin(positive)]#.sample(N_neg)

        
        

    if printing:
        print("There are {} positive instance(s) and {} negative instance(s)".
              format(len(positive),len(negative)))

    return positive, negative
